db.towns.find({ 'mayor.party' : 'I' }, { _id : 0, name : 1, mayor : 1 } )db.towns.find( { 'mayor.party' : { $exists : false } }, { _id : 0, name : 1, mayor : 1 } )db.countries.insert({_id : "us",name : "United States",exports : {foods : [{ name : "bacon", tasty : true },{ name : "burgers" }]}})
db.countries.insert({_id : "ca",name : "Canada",exports : {foods : [{ name : "bacon", tasty : false },{ name : "syrup", tasty : true }]}})
db.countries.insert({_id : "mx",name : "Mexico",exports : {foods : [{name : "salsa",tasty : true,condiment : true}]}})

print( db.countries.count() )
db.countries.find({ 'exports.foods.name' : 'bacon','exports.foods.tasty' : true },{ _id : 0, name : 1 })
db.countries.find({'exports.foods' : {$elemMatch : {name : 'bacon',tasty : true}}},{ _id : 0, name : 1 })
db.countries.find({'exports.foods' : {$elemMatch : {tasty : true,condiment : { $exists : true }}}},{ _id : 0, name : 1 })
db.countries.find({ _id : "mx", name : "United States" },{ _id : 1 })
db.countries.find({$or : [{ _id : "mx" },{ name : "United States" }]},{ _id:1 })
db.towns.update({ _id : ObjectId("507272331125ae15eadfb45f") },{ $set : { "state" : "OR" } });
db.towns.findOne({ _id : ObjectId("507272331125ae15eadfb45f") })
db.towns.update({ _id : ObjectId("507272331125ae15eadfb45f") },{ $inc : { population : 1000} })
db.towns.update({ _id : ObjectId("507272331125ae15eadfb45f") },{ $set : { country: { $ref: "countries", $id: "us" } } })
var portland = db.towns.findOne({ _id : ObjectId("507272331125ae15eadfb45f") })
db.countries.findOne({ _id: portland.country.$id })
db[ portland.country.$ref ].findOne({ _id: portland.country.$id })
var bad_bacon = {'exports.foods' : {$elemMatch : {name : 'bacon',tasty : false}}}
db.countries.find( bad_bacon )
db.countries.remove( bad_bacon )
db.countries.count()
db.towns.find( function() {return this.population > 6000 && this.population < 600000;} )
db.towns.find("this.population > 6000 && this.population < 600000")
db.towns.find( {$where : "this.population > 6000 && this.population < 600000",famous_for : /groundhog/} )
db.towns.find( { "name" : /new/i }  )db.blogger.insert( { "author": { "name": "Bill", "email": "bill@bob.com" }, "create_date": "Thu Jan 31 2008 00:00:00 GMT-0800 (PST)", "text": "abc\ndb.blogger.find( { "author.name": /Bill/ } )Day 2mongo/populate_phones.jspopulatePhones( 800, 5550000, 5650000 )db.phones.find().limit(2)db.system.indexes.find()db.phones.find({display: "+1 800-5650001"}).explain()db.phones.ensureIndex( { display : 1 }, { unique : true, dropDups : true } )db.phones.count({'components.number': { $gt : 5599999 } }) populatePhones( 855, 5550000, 5650000 ) db.phones.distinct('components.number', {'components.number': { $lt : 5550005 } }) db.phones.group({ initial: { count:0 }, reduce: function(phone, output) { output.count++; }, cond: { 'components.number': { $gt : 5599999 } }, key: { 'components.area' : true } })db.phones.group({ 	initial: { count:0 }, 	reduce:  function(phone, output) { output.count++; }, 	cond:    { 'components.number': { $gt : 5599999 } }, 	key:     { 'components.area' : true } }) db.phones.group({     initial: { count:0 },     reduce:  function(phone, output) { output.count++; },     cond:    { 'components.number': { $gt : 5599999 } } }) db.phones.group({    initial: { prefixes : {} },    reduce:  function(phone, output) {        output.prefixes[phone.components.prefix] = 1;    },    finalize: function(out) {        var ary = [];        for(var p in out.prefixes) { ary.push( parseInt( p ) ); }        out.prefixes = ary;    }})[0].prefixesupdate_area = function() { db.phones.find().forEach( function(phone) { phone.components.area++; phone.display = "+"+ phone.components.country+" "+ phone.components.area+"-"+ phone.components.number; db.phone.update({ _id : phone._id }, phone, false); } ) } db.eval(update_area)use admindb.runCommand("top")db.listCommands() db.runCommand({ "count" : "phones" })db.phones.countdb.phones.find().count db.runCommand db.$cmd.findOne({'count' : 'phones'})db.system.js.save({ _id:'getLast', value:function(collection){ return collection.find({}).sort({'_id':1}).limit(1)[0] } })distinctDigits = function(phone){ var number = phone.components.number + '', seen = [], result = [], i = number.length; while(i--) { seen[+number[i]] = 1; } for (i=0; i<10; i++) { if (seen[i]) { result[result.length] = i; } } return result; } db.system.js.save({_id: 'distinctDigits', value: distinctDigits}) mongo/distinct_digits.jsload('/vagrant_data/distinct_digits.js') db.eval("distinctDigits(db.phones.findOne({ 'components.number' : 5551213 }))")map = function() { var digits = distinctDigits(this); emit({digits : digits, country : this.components.country}, {count : 1}); }reduce = function(key, values) { var total = 0; for(var i=0; i<values.length; i++) { total += values[i].count; } return { count : total }; } results = db.runCommand({ mapReduce: 'phones', map: map, reduce: reduce, out: 'phones.report' }) show tablesdb.phones.report.find({'_id.country' : 8}) itititmongo/reduce_2.js reduce = function(key, values) { var total = 0; for(var i=0; i<values.length; i++) { var data = values[i]; if('total' in data) { total += data.total; } else { total += data.count; } } return { total : total }; } Day 3$ mkdir ./mongo1 ./mongo2 ./mongo3 $ mongod --replSet book --dbpath ./mongo1 --port 27011 --rest  $ mongod --replSet book --dbpath ./mongo2 --port 27012 --rest $ mongod --replSet book --dbpath ./mongo3 --port 27013 --rest $ mongo localhost:27011 > rs.initiate({ _id: 'book', members: [ {_id: 1, host: 'localhost:27011'}, {_id: 2, host: 'localhost:27012'}, {_id: 3, host: 'localhost:27013'} ] }) > rs.status() > db.echo.insert({ say : 'HELLO!' }) 1st Master: Ctrl-C$ mongo localhost:270122nd Master: db.echo.find()2nd Master: Ctrl-C$ mongo localhost:27013 > db.isMaster()> db.echo.insert({ say : 'is this thing on?' })$ mkdir ./mongo4 ./mongo5 $ mongod --shardsvr --dbpath ./mongo4 --port 27014 $ mongod --shardsvr --dbpath ./mongo5 --port 27015 $ mkdir ./mongoconfig$ mongod --configsvr --dbpath ./mongoconfig --port 27016 $ mongos --configdb localhost:27016 --chunkSize 1 --port 27020 $ mongo localhost:27020/admin> db.runCommand( { addshard : "localhost:27014" } )        { "shardAdded" : "shard0000", "ok" : 1 } > db.runCommand( { addshard : "localhost:27015" } )        { "shardAdded" : "shard0001", "ok" : 1 } > db.runCommand( { enablesharding : "test" } )                                 { "ok" : 1 } > db.runCommand( { shardcollection : "test.cities", key : {name : 1} } )       { "collectionsharded" : "test.cities", "ok" : 1 } $ wget http://media.pragprog.com/titles/rwdata/code/mongo/mongo_cities1000.json$ sed -e 's/^\(.\)latitude\(.\), longitude\([^}]\)}\(.*\)$/\1longitude\3, latitude\2}\4/' /vagrant_data/mongo_cities1000.json > /vagrant_data/mongo_cities1000_lon_lat.json$ mongoimport -h localhost:27020 -db test --collection cities --type json /vagrant_data/mongo_cities1000_lon_lat.json$ mongo localhost:27020/test> db.cities.ensureIndex({ location : "2d" }) > db.cities.find({ location : { $near : [45.52, -122.67] } }).limit(5)  > db.runCommand({geoNear : 'cities', near : [45.52, -122.67], num : 5, maxDistance : 1}) $ mongofiles -h localhost:27020 put my_file.txt $ mongofiles -h localhost:27020 list > show collections 